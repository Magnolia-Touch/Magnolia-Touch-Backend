name: CI/CD Pipeline

on:
  push:
    branches: [ main ]

env:
  NODE_VERSION: '20.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: testpassword
          MYSQL_DATABASE: magnolia_test
          MYSQL_USER: testuser
          MYSQL_PASSWORD: testpass
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test environment
        run: |
          cp .env.example .env
          echo "DATABASE_URL=mysql://testuser:testpass@localhost:3306/magnolia_test" >> .env
          echo "JWT_SECRET=test-jwt-secret" >> .env
          echo "STRIPE_SECRET_KEY=sk_test_fake_key" >> .env
          echo "STRIPE_WEBHOOK_SECRET=whsec_test_fake_secret" >> .env

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Run database migrations
        run: npx prisma db push --force-reset

      - name: Run tests
        run: npm run test

      - name: Run e2e tests
        run: npm run test:e2e

      - name: Build application
        run: npm run build

  build:
    needs: test
    runs-on: ubuntu-latest

    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Output image
        id: image
        run: |
          echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}" >> $GITHUB_OUTPUT
          echo "digest=${{ steps.build.outputs.digest }}" >> $GITHUB_OUTPUT

  deploy-production:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://api.magnolia.com

    steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EC2_KEY }}

      - name: Convert repo name to lowercase
        id: repo
        run: echo "REPO_LC=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Deploy to VPS
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} "
            echo 'ðŸ“‚ Moving to project directory...'
            cd var || exit 1
            cd www
            cd Magnolia-Touch-Backend

            echo 'ðŸ”„ Resetting local repo and pulling latest code...'
            git fetch --all
            git reset --hard origin/main
            git pull origin main
            docker build -t nestjs-app .

            echo 'ðŸš€ Stopping old container...'
            docker stop nestjs-container
            docker rm nestjs-container
            docker run -d \
              --name nestjs-container \
              -p 3000:3000 \
              --env-file .env \
              nestjs-app

            echo 'ðŸ§¹ Cleaning up unused data...'
            docker system prune -af --volumes

            echo 'âœ… Deployment complete!'
          "

  cleanup:
    needs: [deploy-production]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Cleanup old images
        run: |
          echo "Cleaning up old container images..."
          docker image prune -af
