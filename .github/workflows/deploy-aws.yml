name: Deploy to AWS ECS

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      image_tag:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      DATABASE_URL:
        required: true
      JWT_SECRET:
        required: true
      STRIPE_SECRET_KEY:
        required: true
      STRIPE_WEBHOOK_SECRET:
        required: true

env:
  AWS_REGION: us-east-1
  ECS_CLUSTER: magnolia-cluster
  ECS_SERVICE: magnolia-service
  ECS_TASK_DEFINITION: magnolia-task
  CONTAINER_NAME: magnolia-app

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Download task definition
      run: |
        aws ecs describe-task-definition \
          --task-definition ${{ env.ECS_TASK_DEFINITION }} \
          --query taskDefinition > task-definition.json

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ inputs.image_tag }}
        environment-variables: |
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}
          STRIPE_WEBHOOK_SECRET=${{ secrets.STRIPE_WEBHOOK_SECRET }}
          NODE_ENV=production

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

    - name: Run database migrations
      run: |
        # Get the running task ARN
        TASK_ARN=$(aws ecs list-tasks \
          --cluster ${{ env.ECS_CLUSTER }} \
          --service-name ${{ env.ECS_SERVICE }} \
          --query 'taskArns[0]' \
          --output text)
        
        # Run migration command
        aws ecs execute-command \
          --cluster ${{ env.ECS_CLUSTER }} \
          --task $TASK_ARN \
          --container ${{ env.CONTAINER_NAME }} \
          --interactive \
          --command "npx prisma db push"

    - name: Verify deployment
      run: |
        # Wait a moment for deployment to stabilize
        sleep 30
        
        # Get the load balancer URL and test health endpoint
        ALB_URL=$(aws elbv2 describe-load-balancers \
          --names magnolia-alb \
          --query 'LoadBalancers[0].DNSName' \
          --output text)
        
        # Health check
        curl -f "http://${ALB_URL}/health" || exit 1
        echo "âœ… Deployment verification successful!"
