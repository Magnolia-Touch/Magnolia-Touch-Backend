// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  DELIVERY
}

enum OrderStatus {
  pending
  processing
  shipped
  delivered
  cancelled
  refunded
}

enum SocialNames {
  FACEBOOK
  INSTAGRAM
  TWITTER
  YOUTUBE
}

enum CleaningStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model User {
  customer_id       Int       @id @default(autoincrement())
  customer_name     String
  email             String    @unique
  Phone             String
  password          String
  role              Role      @default(USER)
  resetOtp          String?   @default("0") // string default
  resetOtpExpiresAt DateTime? @default(now()) // set to current time
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  Orders               Orders[]
  Church               Church[]
  Booking              Booking[]
  Reviews              Reviews[]
  UserAddress          UserAddress[]
  BillingAddress       BillingAddress[]
  Cart                 Cart[]
  deadPersonProfiles   DeadPersonProfile[]
  DeliveryAgentProfile DeliveryAgentProfile[]
}

model UserAddress {
  deli_address_id Int      @id @default(autoincrement())
  Name            String
  street          String
  town_or_city    String
  country         String?
  postcode        String
  phone           String
  email           String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  User            User?    @relation(fields: [userCustomer_id], references: [customer_id])
  userCustomer_id Int?
  Orders          Orders[]
}

model BillingAddress {
  bill_address_id Int      @id @default(autoincrement())
  Name            String
  street          String
  town_or_city    String
  country         String?
  postcode        String
  phone           String
  email           String
  User            User?    @relation(fields: [userCustomer_id], references: [customer_id])
  userCustomer_id Int?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  Orders          Orders[]
}

model Products {
  product_id           Int                @id @default(autoincrement())
  product_name         String
  price                String
  box_contains         String?
  short_Description    String             @db.Text
  detailed_description String?            @db.Text
  company_guarantee    String?            @db.Text
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  Dimensions           ProductDimension[]
  CartItem             CartItem[]
}

model Services {
  services_id Int      @id @default(autoincrement())
  image       String
  name        String
  discription String
  features    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Cart {
  cartId       Int        @id @default(autoincrement())
  userId       Int
  items        CartItem[]
  total_amount String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  user User @relation(fields: [userId], references: [customer_id])
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cart    Cart     @relation(fields: [cartId], references: [cartId])
  product Products @relation(fields: [productId], references: [product_id])
}

model ProductDimension {
  dimension_id       Int       @id @default(autoincrement())
  dimension          String
  Products           Products? @relation(fields: [productsProduct_id], references: [product_id])
  productsProduct_id Int?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

model SubscriptionPlan {
  Subscription_id    Int      @id @default(autoincrement())
  discription        String
  Subscription_name  String
  Frequency          Int
  Price              String
  isSubscriptionPlan Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  bookings Booking[]
}

model Flowers {
  flower_id   Int      @id @default(autoincrement())
  image       String?
  Name        String
  Price       String
  Description String?
  stock_count Int      @default(0)
  in_stock    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  bookings Booking[]
}

model Church {
  church_id       Int      @id @default(autoincrement())
  church_name     String
  city            String
  state           String
  church_address  String?
  User            User?    @relation(fields: [userCustomer_id], references: [customer_id])
  userCustomer_id Int?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  Booking Booking[]
  Orders  Orders[]
}

model Booking {
  id                       Int            @id @default(autoincrement())
  booking_ids              String         @unique
  name_on_memorial         String
  plot_no                  String?
  User_id                  Int
  church_id                Int
  Subscription_id          Int?
  amount                   Int            @default(0)
  first_cleaning_date      DateTime
  second_cleaning_date     DateTime?
  no_of_subscription_years Int            @default(1)
  Flower_id                Int?
  booking_date             DateTime
  anniversary_date         DateTime?
  status                   CleaningStatus @default(PENDING)
  is_bought                Boolean        @default(false)
  createdAt                DateTime       @default(now())
  updatedAt                DateTime       @updatedAt

  user         User              @relation(fields: [User_id], references: [customer_id])
  Church       Church            @relation(fields: [church_id], references: [church_id])
  subscription SubscriptionPlan? @relation(fields: [Subscription_id], references: [Subscription_id], onDelete: SetNull)
  flower       Flowers?          @relation(fields: [Flower_id], references: [flower_id])
}

model Reviews {
  Review_id          Int      @id @default(autoincrement())
  User_Id            Int
  Review_Description String
  Rating             Int
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  user User @relation(fields: [User_Id], references: [customer_id])
}

model DeadPersonProfile {
  profile_id       Int      @id @default(autoincrement())
  owner_id         String
  firstName        String
  lastName         String
  profile_image    String?
  background_image String?
  born_date        String
  death_date       String
  memorial_place   String?
  is_paid          Boolean  @default(false)
  slug             String   @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  biography   Biography[]
  gallery     Gallery[]
  family      Family[]
  guestBook   GuestBook[]
  user        User          @relation(fields: [owner_id], references: [email])
  Orders      Orders[]
  SocialLinks SocialLinks[]
  Events      Events[]
}

model SocialLinks {
  id              Int      @id @default(autoincrement())
  socialMediaName String?
  link            String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  deadPersonProfiles String
  profile            DeadPersonProfile @relation(fields: [deadPersonProfiles], references: [slug])
}

model Events {
  id        Int      @id @default(autoincrement())
  year      String
  event     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  deadPersonProfiles String
  profile            DeadPersonProfile @relation(fields: [deadPersonProfiles], references: [slug])
}

model Biography {
  biography_id Int      @id @default(autoincrement())
  discription  String   @db.Text
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  deadPersonProfiles String
  profile            DeadPersonProfile @relation(fields: [deadPersonProfiles], references: [slug])
}

model Gallery {
  gallery_id Int      @id @default(autoincrement())
  link       String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  deadPersonProfiles String
  profile            DeadPersonProfile @relation(fields: [deadPersonProfiles], references: [slug])
}

model Family {
  family_id    Int      @id @default(autoincrement())
  relationship String
  name         String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  deadPersonProfiles String
  profile            DeadPersonProfile @relation(fields: [deadPersonProfiles], references: [slug])
}

model GuestBook {
  guestbook_id       Int              @id @default(autoincrement())
  guestBookItems     GuestBookItems[]
  deadPersonProfiles String
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt

  profile DeadPersonProfile @relation(fields: [deadPersonProfiles], references: [slug])
}

model GuestBookItems {
  guestbookitems_id Int      @id @default(autoincrement())
  guestbook_id      Int
  first_name        String
  last_name         String?
  email             String?
  phone             String?
  message           String   @db.Text
  photo_upload      String?
  date              String
  is_approved       Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  profile GuestBook @relation(fields: [guestbook_id], references: [guestbook_id])
}

model Orders {
  id                Int         @id @default(autoincrement())
  User_id           Int         @unique
  orderNumber       String      @unique
  status            OrderStatus @default(pending)
  totalAmount       Decimal     @db.Decimal(10, 2)
  shippingCost      Decimal     @default(0) @db.Decimal(10, 2)
  taxAmount         Decimal     @default(0) @db.Decimal(10, 2)
  discountAmount    Decimal     @default(0) @db.Decimal(10, 2)
  notes             String?
  memoryProfileId   String
  is_paid           Boolean     @default(false)
  shippingAddressId Int?
  billingAddressId  Int
  church_id         Int?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  tracking_details  String?
  delivery_agent_id Int?

  user                   User                  @relation(fields: [User_id], references: [customer_id])
  useraddress            UserAddress?          @relation(fields: [shippingAddressId], references: [deli_address_id])
  billingaddress         BillingAddress?       @relation(fields: [billingAddressId], references: [bill_address_id])
  churchAddress          Church?               @relation(fields: [church_id], references: [church_id])
  deadpersonprofile      DeadPersonProfile     @relation(fields: [memoryProfileId], references: [slug])
  DeliveryAgentProfile   DeliveryAgentProfile? @relation(fields: [deliveryAgentProfileId], references: [id])
  deliveryAgentProfileId Int?

  @@map("orders")
}

model DeliveryAgentProfile {
  id               Int      @id @default(autoincrement())
  deliveryagent_id Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  orders           Orders[]

  User User? @relation(fields: [deliveryagent_id], references: [customer_id])
}
