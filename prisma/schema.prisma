// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  DELIVERY
}

enum OrderStatus {
  pending
  processing
  shipped
  delivered
  cancelled
  refunded
}

enum CleaningStatus {
  pending
  confirmed
  cleaned
}

model User {
  customer_id   Int    @id @default(autoincrement())
  customer_name String
  email         String @unique
  Phone         String
  password      String
  role          Role   @default(USER)

  Orders               Orders[]
  Church               Church[]
  Booking              Booking[]
  Reviews              Reviews[]
  UserAddress          UserAddress[]
  BillingAddress       BillingAddress[]
  Cart                 Cart[]
  deadPersonProfiles   DeadPersonProfile[]
  OrderItems           OrderItems[]
  DeliveryAgentProfile DeliveryAgentProfile[]
}

model UserAddress {
  deli_address_id Int     @id @default(autoincrement())
  Name            String
  street          String
  town_or_city    String
  country         String?
  postcode        String
  phone           String
  email           String

  User            User?    @relation(fields: [userCustomer_id], references: [customer_id])
  userCustomer_id Int?
  Orders          Orders[]
}

model BillingAddress {
  bill_address_id Int      @id @default(autoincrement())
  Name            String
  street          String
  town_or_city    String
  country         String?
  postcode        String
  phone           String
  email           String
  User            User?    @relation(fields: [userCustomer_id], references: [customer_id])
  userCustomer_id Int?
  Orders          Orders[]
}

model Products {
  product_id           Int                @id @default(autoincrement())
  product_name         String
  price                String
  box_contains         String?
  short_Description    String             @db.Text
  detailed_description String?            @db.Text
  company_guarantee    String?            @db.Text
  orderItems           OrderItems[]
  Dimensions           ProductDimension[]
  CartItem             CartItem[]
}

model Services {
  services_id Int    @id @default(autoincrement())
  image       String
  name        String
  discription String
  features    String
}

model Cart {
  cartId       Int        @id @default(autoincrement())
  userId       Int
  items        CartItem[]
  total_amount String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  user User @relation(fields: [userId], references: [customer_id])
}

model CartItem {
  id        Int   @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int
  price     Float

  cart    Cart     @relation(fields: [cartId], references: [cartId])
  product Products @relation(fields: [productId], references: [product_id])
}

model ProductDimension {
  dimension_id       Int       @id @default(autoincrement())
  dimension          String
  Products           Products? @relation(fields: [productsProduct_id], references: [product_id])
  productsProduct_id Int?
}

model SubscriptionPlan {
  Subscription_id   Int    @id @default(autoincrement())
  discription       String
  Subscription_name String
  Frequency         Int
  Price             String

  bookings Booking[]
}

model Flowers {
  flower_id Int @id @default(autoincrement())

  image       String
  Name        String
  Price       String
  Description String?
  in_stock    Boolean @default(false)

  bookings Booking[]
}

model Church {
  church_id       Int       @id @default(autoincrement())
  church_name     String
  city            String
  state           String
  church_address  String?
  User            User?     @relation(fields: [userCustomer_id], references: [customer_id])
  userCustomer_id Int?
  Booking         Booking[]
}

model Booking {
  id                       Int       @id @default(autoincrement())
  booking_ids              String    @unique
  name_on_memorial         String
  plot_no                  String?
  User_id                  Int
  church_id                Int
  Subscription_id          Int
  amount                   Int       @default(0)
  first_cleaning_date      DateTime
  second_cleaning_date     DateTime?
  no_of_subscription_years Int       @default(1)
  Flower_id                Int?
  booking_date             DateTime
  anniversary_date         DateTime?
  status                   CleaningStatus @default(pending)
  is_bought                Boolean   @default(false)

  user         User             @relation(fields: [User_id], references: [customer_id])
  Church       Church           @relation(fields: [church_id], references: [church_id])
  subscription SubscriptionPlan @relation(fields: [Subscription_id], references: [Subscription_id])
  flower       Flowers?         @relation(fields: [Flower_id], references: [flower_id])
}

model Reviews {
  Review_id          Int    @id @default(autoincrement())
  User_Id            Int
  Review_Description String
  Rating             Int

  user User @relation(fields: [User_Id], references: [customer_id])
}

model DeadPersonProfile {
  profile_id       Int     @id @default(autoincrement())
  owner_id         String
  name             String?
  profile_image    String?
  background_image String?
  born_date        String?
  death_date       String?
  memorial_place   String?
  slug             String  @unique

  biography         Biography[]
  gallery           Gallery[]
  family            Family[]
  guestBook         GuestBook[]
  user              User                @relation(fields: [owner_id], references: [email])
  Photos            Photos[]
  Videos            Videos[]
  Links             Links[]
  Parents           Parents[]
  Siblings          Siblings[]
  Cousins           Cousins[]
  Friends           Friends[]
  Spouse            Spouse[]
  NieceAndNephew    NieceAndNephew[]
  Childrens         Childrens[]
  Pets              Pets[]
  GrandChildrens    GrandChildrens[]
  GrandParents      GrandParents[]
  GreatGrandParents GreatGrandParents[]
}

model Biography {
  biography_id          Int     @id @default(autoincrement())
  short_caption_of_life String?
  life_summary          String?
  personality_lifevalue String?
  impact_on_others      String?
  deadPersonProfiles    String

  profile DeadPersonProfile @relation(fields: [deadPersonProfiles], references: [slug])
}

model Gallery {
  gallery_id         Int    @id @default(autoincrement())
  deadPersonProfiles String

  photos Photos[]
  videos Videos[]
  links  Links[]

  profile DeadPersonProfile @relation(fields: [deadPersonProfiles], references: [slug])
}

model Photos {
  photo_id           Int    @id @default(autoincrement())
  gallery_id         Int
  url                String
  deadPersonProfiles String

  profile DeadPersonProfile @relation(fields: [deadPersonProfiles], references: [slug])
  gallery Gallery           @relation(fields: [gallery_id], references: [gallery_id])
}

model Videos {
  video_id           Int    @id @default(autoincrement())
  gallery_id         Int
  url                String
  deadPersonProfiles String

  profile DeadPersonProfile @relation(fields: [deadPersonProfiles], references: [slug])

  gallery Gallery @relation(fields: [gallery_id], references: [gallery_id])
}

model Links {
  link_id            Int     @id @default(autoincrement())
  gallery_id         Int
  url                String?
  deadPersonProfiles String

  profile DeadPersonProfile @relation(fields: [deadPersonProfiles], references: [slug])

  gallery Gallery @relation(fields: [gallery_id], references: [gallery_id])
}

model Family {
  family_id          Int               @id @default(autoincrement())
  deadPersonProfiles String
  profile            DeadPersonProfile @relation(fields: [deadPersonProfiles], references: [slug])

  parents           Parents[]
  siblings          Siblings[]
  cousins           Cousins[]
  friends           Friends[]
  spouse            Spouse[]
  nieceAndNephew    NieceAndNephew[]
  childrens         Childrens[]
  pets              Pets[]
  grandchildrens    GrandChildrens[]
  grandparents      GrandParents[]
  greatGrandparents GreatGrandParents[]
}

model GuestBook {
  guestbook_id       Int              @id @default(autoincrement())
  guestBookItems     GuestBookItems[]
  deadPersonProfiles String

  profile DeadPersonProfile @relation(fields: [deadPersonProfiles], references: [slug])
}

model GuestBookItems {
  guestbookitems_id Int     @id @default(autoincrement())
  guestbook_id      Int
  first_name        String
  last_name         String?
  email             String?
  phone             String?
  message           String
  photo_upload      String?
  date              String
  is_approved       Boolean @default(false)

  profile GuestBook @relation(fields: [guestbook_id], references: [guestbook_id])
}

model Parents {
  id                 Int    @id @default(autoincrement())
  family_id          Int
  name               String
  deadPersonProfiles String

  profile DeadPersonProfile @relation(fields: [deadPersonProfiles], references: [slug])

  family Family @relation(fields: [family_id], references: [family_id])
}

model Siblings {
  id                 Int    @id @default(autoincrement())
  family_id          Int
  name               String
  deadPersonProfiles String

  profile DeadPersonProfile @relation(fields: [deadPersonProfiles], references: [slug])

  family Family @relation(fields: [family_id], references: [family_id])
}

model Cousins {
  id                 Int    @id @default(autoincrement())
  family_id          Int
  name               String
  deadPersonProfiles String

  profile DeadPersonProfile @relation(fields: [deadPersonProfiles], references: [slug])

  family Family @relation(fields: [family_id], references: [family_id])
}

model Friends {
  id                 Int    @id @default(autoincrement())
  family_id          Int
  name               String
  deadPersonProfiles String

  profile DeadPersonProfile @relation(fields: [deadPersonProfiles], references: [slug])

  family Family @relation(fields: [family_id], references: [family_id])
}

model Spouse {
  id                 Int    @id @default(autoincrement())
  family_id          Int
  name               String
  deadPersonProfiles String

  profile DeadPersonProfile @relation(fields: [deadPersonProfiles], references: [slug])

  family Family @relation(fields: [family_id], references: [family_id])
}

model NieceAndNephew {
  id                 Int    @id @default(autoincrement())
  family_id          Int
  name               String
  deadPersonProfiles String

  profile DeadPersonProfile @relation(fields: [deadPersonProfiles], references: [slug])

  family Family @relation(fields: [family_id], references: [family_id])
}

model Childrens {
  id                 Int    @id @default(autoincrement())
  family_id          Int
  name               String
  deadPersonProfiles String

  profile DeadPersonProfile @relation(fields: [deadPersonProfiles], references: [slug])

  family Family @relation(fields: [family_id], references: [family_id])
}

model Pets {
  id                 Int    @id @default(autoincrement())
  family_id          Int
  name               String
  deadPersonProfiles String

  profile DeadPersonProfile @relation(fields: [deadPersonProfiles], references: [slug])

  family Family @relation(fields: [family_id], references: [family_id])
}

model GrandChildrens {
  id                 Int    @id @default(autoincrement())
  family_id          Int
  name               String
  deadPersonProfiles String

  profile DeadPersonProfile @relation(fields: [deadPersonProfiles], references: [slug])

  family Family @relation(fields: [family_id], references: [family_id])
}

model GrandParents {
  id                 Int    @id @default(autoincrement())
  family_id          Int
  name               String
  deadPersonProfiles String

  profile DeadPersonProfile @relation(fields: [deadPersonProfiles], references: [slug])

  family Family @relation(fields: [family_id], references: [family_id])
}

model GreatGrandParents {
  id                 Int    @id @default(autoincrement())
  family_id          Int
  name               String
  deadPersonProfiles String

  profile DeadPersonProfile @relation(fields: [deadPersonProfiles], references: [slug])

  family Family @relation(fields: [family_id], references: [family_id])
}

model Orders {
  id                Int          @id @default(autoincrement())
  User_id           Int          @unique
  orderNumber       String       @unique
  status            OrderStatus  @default(pending)
  totalAmount       Decimal      @db.Decimal(10, 2)
  shippingCost      Decimal      @default(0) @db.Decimal(10, 2)
  taxAmount         Decimal      @default(0) @db.Decimal(10, 2)
  discountAmount    Decimal      @default(0) @db.Decimal(10, 2)
  notes             String?
  shippingAddressId Int
  billingAddressId  Int
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  items             OrderItems[]
  tracking_details  String?
  delivery_agent_id Int?

  user                   User                  @relation(fields: [User_id], references: [customer_id])
  useraddress            UserAddress           @relation(fields: [shippingAddressId], references: [deli_address_id])
  billingaddress         BillingAddress        @relation(fields: [billingAddressId], references: [bill_address_id])
  DeliveryAgentProfile   DeliveryAgentProfile? @relation(fields: [deliveryAgentProfileId], references: [id])
  deliveryAgentProfileId Int?

  @@map("orders")
}

model OrderItems {
  id        Int     @id @default(autoincrement())
  order_id  Int     @unique
  productId Int
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  total     Decimal @db.Decimal(10, 2)

  order           Orders   @relation(fields: [order_id], references: [id], onDelete: Cascade)
  product         Products @relation(fields: [productId], references: [product_id])
  User            User?    @relation(fields: [userCustomer_id], references: [customer_id])
  userCustomer_id Int?

  @@map("order_items")
}

model DeliveryAgentProfile {
  id               Int      @id @default(autoincrement())
  deliveryagent_id Int
  orders           Orders[]

  User User? @relation(fields: [deliveryagent_id], references: [customer_id])
}
